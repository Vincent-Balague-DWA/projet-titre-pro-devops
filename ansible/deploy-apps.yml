# Playbook complet pour déployer l'architecture React + NestJS + MySQL

- name: Provisionner la base de données MySQL
  hosts: database
  become: yes
  tasks:
    - name: Installer MySQL Server
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: Installer PyMySQL pour les modules Ansible
      apt:
        name: python3-pymysql
        state: present

    - name: Créer la base de données
      community.mysql.mysql_db:
        name: "{{ db_name }}"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Créer un utilisateur MySQL
      community.mysql.mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

    # ===== DATADOG MONITORING DATABASE =====
    - name: Installer Datadog Agent
      shell: |
        DD_API_KEY={{ datadog_api_key }} \
        DD_SITE="datadoghq.eu" \
        bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh)"

    - name: Configurer Datadog pour MySQL
      template:
        src: mysql-datadog.yaml.j2
        dest: /etc/datadog-agent/conf.d/mysql.d/conf.yaml
      notify: restart datadog

    - name: Démarrer Datadog Agent
      systemd:
        name: datadog-agent
        state: started
        enabled: yes

- name: Déployer l'API Backend (NestJS) avec Docker
  hosts: backend
  become: yes
  tasks:
    - name: Installer Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Démarrer et activer Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Ajouter l'utilisateur ubuntu au groupe docker
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Récupérer le tag de l'image Docker
      shell: cat /tmp/docker-image-tag.txt
      register: docker_image_tag

    - name: Créer le fichier de configuration Backend
      template:
        src: backend.env.j2
        dest: /tmp/backend.env
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - name: Arrêter le conteneur existant s'il existe
      shell: |
        sudo docker stop backend || true
        sudo docker rm backend || true

    - name: Déployer le Backend avec Docker
      shell: |
        sudo docker pull {{ docker_username }}/devops-todolist:{{ docker_image_tag.stdout }}
        sudo docker run -d \
          --name backend \
          --restart unless-stopped \
          -p 3000:3000 \
          --env-file /tmp/backend.env \
          {{ docker_username }}/devops-todolist:{{ docker_image_tag.stdout }}

    - name: Vérifier que le conteneur fonctionne
      shell: sudo docker ps | grep backend
      register: container_status

    - name: Afficher le statut du conteneur
      debug:
        msg: "Backend container status: {{ container_status.stdout }}"

    # ===== DATADOG MONITORING BACKEND =====
    - name: Installer Datadog Agent
      shell: |
        DD_API_KEY={{ datadog_api_key }} \
        DD_SITE="datadoghq.eu" \
        bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh)"

    - name: Configurer Datadog pour Docker
      template:
        src: docker-datadog.yaml.j2
        dest: /etc/datadog-agent/conf.d/docker.d/conf.yaml
      notify: restart datadog

    - name: Démarrer Datadog Agent
      systemd:
        name: datadog-agent
        state: started
        enabled: yes

- name: Déployer le Frontend React avec Nginx
  hosts: frontend
  become: yes
  tasks:
    - name: Installer Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Créer le dossier frontend
      file:
        path: /var/www/frontend
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Extraire le build Frontend pré-compilé
      shell: |
        cd /var/www/frontend
        tar -xzf /tmp/frontend-build.tar.gz
        rm /tmp/frontend-build.tar.gz
        chown -R www-data:www-data /var/www/frontend

    - name: Configurer Nginx pour servir les fichiers statiques
      template:
        src: nginx-frontend.conf.j2
        dest: /etc/nginx/sites-available/frontend
      notify: restart nginx

    - name: Désactiver le site par défaut
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Activer le site frontend
      file:
        src: /etc/nginx/sites-available/frontend
        dest: /etc/nginx/sites-enabled/frontend
        state: link
      notify: restart nginx

    - name: Démarrer et activer Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

    # ===== DATADOG MONITORING FRONTEND =====
    - name: Installer Datadog Agent
      shell: |
        DD_API_KEY={{ datadog_api_key }} \
        DD_SITE="datadoghq.eu" \
        bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh)"

    - name: Configurer Datadog pour Nginx
      template:
        src: nginx-datadog.yaml.j2
        dest: /etc/datadog-agent/conf.d/nginx.d/conf.yaml
      notify: restart datadog

    - name: Démarrer Datadog Agent
      systemd:
        name: datadog-agent
        state: started
        enabled: yes

# ===== HANDLERS - À LA TOUTE FIN DU FICHIER =====
  handlers:
    - name: restart datadog
      systemd:
        name: datadog-agent
        state: restarted
        
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted