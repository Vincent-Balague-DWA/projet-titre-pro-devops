#!/bin/bash
# deploy-simple-fixed.sh - Script de d√©ploiement corrig√©

echo "üöÄ D√©ploiement Architecture Simple (3 instances)"
echo "=============================================="

# V√©rifier qu'on est dans le bon dossier
if [ ! -f deploy-apps.yml ]; then
    echo "‚ùå Erreur : deploy-apps.yml non trouv√©"
    echo "Assurez-vous d'√™tre dans le dossier ansible-simple"
    exit 1
fi

# Mise √† jour de l'inventaire avec les IPs Terraform
echo "üìç R√©cup√©ration des IPs..."
cd ../terraform
FRONTEND_IP=$(terraform output -raw frontend_public_ip 2>/dev/null)
BACKEND_IP=$(terraform output -raw backend_public_ip 2>/dev/null)
DATABASE_IP=$(terraform output -raw database_public_ip 2>/dev/null)

cd ../ansible

if [ -z "$FRONTEND_IP" ] || [ -z "$BACKEND_IP" ] || [ -z "$DATABASE_IP" ]; then
    echo "‚ùå Impossible de r√©cup√©rer les IPs"
    echo "Assurez-vous que Terraform a cr√©√© les instances"
    exit 1
fi

# Cr√©er l'inventaire avec les BONS noms de groupes
cat > inventory.yml << EOF
all:
  children:
    database:
      hosts:
        database-server:
          ansible_host: $DATABASE_IP
          ansible_user: ubuntu
          ansible_ssh_private_key_file: ~/.ssh/id_rsa_devops

    backend:
      hosts:
        backend-server:
          ansible_host: $BACKEND_IP
          ansible_user: ubuntu
          ansible_ssh_private_key_file: ~/.ssh/id_rsa_devops

    frontend:
      hosts:
        frontend-server:
          ansible_host: $FRONTEND_IP
          ansible_user: ubuntu
          ansible_ssh_private_key_file: ~/.ssh/id_rsa_devops

  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
EOF

echo "‚úÖ Inventaire cr√©√© avec :"
echo "   Frontend : $FRONTEND_IP"
echo "   Backend  : $BACKEND_IP"
echo "   Database : $DATABASE_IP"

# Test de connexion
echo ""
echo "üîó Test de connexion aux instances..."
ansible all -i inventory.yml -m ping

if [ $? -ne 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  Probl√®me de connexion d√©tect√©"
    echo "V√©rification des cl√©s SSH..."

    # Essayer de trouver une cl√© qui fonctionne
    for key in ~/.ssh/id_rsa ~/.ssh/id_rsa_new ~/.ssh/id_ed25519; do
        if [ -f "$key" ]; then
            echo "Test avec $key..."
            sed -i "s|ansible_ssh_private_key_file:.*|ansible_ssh_private_key_file: $key|g" inventory.yml
            if ansible all -i inventory.yml -m ping -o &>/dev/null; then
                echo "‚úÖ Cl√© fonctionnelle trouv√©e : $key"
                break
            fi
        fi
    done
fi

# Afficher l'inventaire pour debug
echo ""
echo "üìã Inventaire utilis√© :"
cat inventory.yml
echo ""

# D√©ploiement
echo "üì¶ D√©ploiement des applications..."
ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.yml deploy-apps.yml -v \
  -e "db_name=${DB_NAME}" \
  -e "db_user=${DB_USER}" \
  -e "db_password=${DB_PASSWORD}"

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ D√©ploiement termin√© avec succ√®s !"
    echo ""
    echo "üåê Acc√®s √† votre application :"
    echo "   Frontend : http://$FRONTEND_IP"
    echo "   API Test : http://$FRONTEND_IP/api"
    echo "   Backend direct : http://$BACKEND_IP:3000/api"
else
    echo ""
    echo "‚ùå Erreur lors du d√©ploiement"
    echo ""
    echo "üîç Pour debugger :"
    echo "1. V√©rifiez que les instances sont bien cr√©√©es :"
    echo "   cd ../terraform && terraform output"
    echo ""
    echo "2. Testez la connexion SSH manuellement :"
    echo "   ssh -i ~/.ssh/id_rsa ubuntu@$FRONTEND_IP"
    echo ""
    echo "3. Relancez avec plus de d√©tails :"
    echo "   ansible-playbook -i inventory.yml deploy-apps.yml -vvv"
fi
