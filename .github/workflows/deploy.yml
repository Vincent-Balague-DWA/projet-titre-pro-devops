name: CI/CD - D√©ploiement complet

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: D√©ploiement Infra + Application
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID:       ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:   ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_db_name:          ${{ secrets.DB_NAME }}
      TF_VAR_db_user:          ${{ secrets.DB_USER }}
      TF_VAR_db_password:      ${{ secrets.DB_PASSWORD }}
      TF_VAR_project_name:     devops-todouxlist
      TF_VAR_aws_region:       eu-west-1
      TF_VAR_ssh_public_key_path: ~/.ssh/id_rsa_devops.pub
      TF_VAR_allowed_ssh_ips:  '["0.0.0.0/0"]'  # Modifi√© pour GitHub Actions

    steps:
      - name: Checkout du d√©p√¥t
        uses: actions/checkout@v3

      - name: Installer d√©pendances Syst√®me
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl gnupg software-properties-common
          curl -fsSL https://apt.releases.hashicorp.com/gpg |
            sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" |
            sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install -y terraform ansible

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Compiler le Backend
        working-directory: ./backend
        run: |
          echo "‚öôÔ∏è Compilation du Backend..."
          npm install
          npm run build
          echo "‚úÖ Backend compil√©"

      - name: Compiler le Backend
        working-directory: ./backend
        run: |
          echo "‚öôÔ∏è Compilation du Backend..."
          npm install
          npm run build
          echo "‚úÖ Backend compil√©"

      - name: Login Docker Hub
        run: |
          echo "üîë Connexion √† Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Builder et pousser l'image Docker Backend
        working-directory: ./backend
        run: |
          echo "üê≥ Build de l'image Docker Backend..."
          
          # Forcer l'utilisation de docker build standard
          export DOCKER_BUILDKIT=0
          export COMPOSE_DOCKER_CLI_BUILD=0
          
          # Cr√©er des variables pour √©viter les probl√®mes de parsing
          USERNAME="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_TAG="backend-$(date +%Y%m%d-%H%M%S)"
          
          echo "Building image: $USERNAME/devops-todolist:$IMAGE_TAG"
          
          # Build de l'image (legacy mode - pas d'option --progress)
          echo "üî® D√©but du build Docker..."
          docker build --no-cache -t "$USERNAME/devops-todolist:$IMAGE_TAG" .
          echo "‚úÖ Image avec tag temporaire cr√©√©e"
          
          docker tag "$USERNAME/devops-todolist:$IMAGE_TAG" "$USERNAME/devops-todolist:latest"
          echo "‚úÖ Tag latest cr√©√©"
          
          # Push des images
          echo "üì§ Push de l'image avec tag..."
          docker push "$USERNAME/devops-todolist:$IMAGE_TAG"
          echo "‚úÖ Image avec tag pouss√©e"
          
          echo "üì§ Push de l'image latest..."
          docker push "$USERNAME/devops-todolist:latest"
          echo "‚úÖ Image latest pouss√©e"
          
          # Sauvegarder le tag pour Ansible
          echo "$IMAGE_TAG" > ../docker-image-tag.txt
          echo "‚úÖ Tag sauvegard√©: $IMAGE_TAG"
          
      - name: Compiler le Frontend
        working-directory: ./frontend
        run: |
          echo "üé® Compilation du Frontend..."
          npm install
          npm run build
          cd ..
          tar -czf frontend-build.tar.gz -C frontend dist/
          echo "‚úÖ Frontend compil√© et archiv√©"

      # ‚ùå SUPPRIMER cette section car on utilise Docker maintenant :
      # - name: Compiler le Backend
      #   working-directory: ./backend
      #   run: |
      #     echo "‚öôÔ∏è Compilation du Backend..."
      #     npm install
      #     npm run build
      #     cd ..
      #     tar -czf backend-build.tar.gz -C backend dist/ package.json package-lock.json
      #     echo "‚úÖ Backend compil√© et archiv√©"

      # - name: Compiler le Frontend
      #   working-directory: ./frontend
      #   run: |
      #     echo "üé® Compilation du Frontend..."
      #     npm install
      #     npm run build
      #     cd ..
      #     tar -czf frontend-build.tar.gz -C frontend dist/
      #     echo "‚úÖ Frontend compil√© et archiv√©"

      - name: Pr√©parer la cl√© SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # G√©n√©rer la cl√© publique √† partir de la cl√© priv√©e
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa_devops.pub

      - name: D√©ployer l'infrastructure avec Terraform
        working-directory: ./terraform
        run: |
          echo "üèóÔ∏è D√©ploiement de l'infrastructure..."
          terraform init
          terraform apply -auto-approve
          echo "‚úÖ Infrastructure d√©ploy√©e"

      - name: Attendre que les instances soient pr√™tes pour SSH
        run: |
          echo "‚è≥ Attente de l'initialisation des instances EC2..."
          sleep 120

      - name: Transf√©rer les builds sur les serveurs
        working-directory: ./terraform
        run: |
          echo "üì¶ Transfert des builds vers les serveurs..."
          FRONTEND_IP=$(terraform output -raw frontend_public_ip)
          BACKEND_IP=$(terraform output -raw backend_public_ip)
          
          echo "Frontend IP: $FRONTEND_IP"
          echo "Backend IP: $BACKEND_IP"
          
          # Transfer frontend build (comme avant)
          echo "Transfert frontend build..."
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ../frontend-build.tar.gz ubuntu@$FRONTEND_IP:/tmp/
            
          # Transfer Docker image tag pour le backend
          echo "Transfert Docker image tag..."
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ../docker-image-tag.txt ubuntu@$BACKEND_IP:/tmp/
          
          echo "‚úÖ Builds transf√©r√©s"

      - name: D√©ployer l'application avec Ansible
        working-directory: ./ansible
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          chmod +x deploy-simple.sh
          ./deploy-simple.sh